%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/demasma/Box Sync/Nasa Flight Data/DataAnalysis_Matt/NASA-PEC-R-Analysis/Data/matb_ts_v2_2016-03-02.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/03/02 15:44:37

%% Initialize variables.
filename = '/Users/demasma/Box Sync/Nasa Flight Data/DataAnalysis_Matt/NASA-PEC-R-Analysis/Data/matb_ts_v2_2016-03-02.csv';
delimiter = ',';
startRow = 2;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%s%s%s%s%s%s%*s%*s%s%s%s%s%s%s%s%*s%*s%*s%*s%*s%*s%*s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[11,14,15,16,17,18,19,20,21]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [11,14,15,16,17,18,19,20,21]);
rawCellColumns = raw(:, [1,2,3,4,5,6,7,8,9,10,12,13]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
matb_ts = table;
matb_ts.Subject = rawCellColumns(:, 1);
matb_ts.Runid = rawCellColumns(:, 2);
matb_ts.Experiment = rawCellColumns(:, 3);
matb_ts.Protocol = rawCellColumns(:, 4);
matb_ts.Sessionid = rawCellColumns(:, 5);
matb_ts.Task = rawCellColumns(:, 6);
matb_ts.Run = rawCellColumns(:, 7);
matb_ts.Trial = rawCellColumns(:, 8);
matb_ts.Trialid = rawCellColumns(:, 9);
matb_ts.Session = rawCellColumns(:, 10);
matb_ts.SubjectTrial = cell2mat(rawNumericColumns(:, 1));
matb_ts.SessionOrder = rawCellColumns(:, 11);
matb_ts.RunOrder = rawCellColumns(:, 12);
matb_ts.Track = cell2mat(rawNumericColumns(:, 2));
matb_ts.Comm = cell2mat(rawNumericColumns(:, 3));
matb_ts.ResMan = cell2mat(rawNumericColumns(:, 4));
matb_ts.Avg = cell2mat(rawNumericColumns(:, 5));
matb_ts.Hr = cell2mat(rawNumericColumns(:, 6));
matb_ts.Min = cell2mat(rawNumericColumns(:, 7));
matb_ts.Sec = cell2mat(rawNumericColumns(:, 8));
matb_ts.Time = cell2mat(rawNumericColumns(:, 9));

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;